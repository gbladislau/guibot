name: GH Actions

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  original-travis-ci-job:
    name: Linux ${{ matrix.install_variant }} with Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    env:
      DISPLAY: ':99.0'

    strategy:
      matrix:
        python-version: [3.10.8, 3.11, 3.12]
        install_variant: ["pip"]
        include:
          - python-version: 3.12
            install_variant: "rpm.fedora.40"
          - python-version: 3.12
            install_variant: "deb.ubuntu.noble"
      fail-fast: false

    steps:
      - run: echo "Job triggered by a ${{ github.event_name }} event on branch is ${{ github.ref }} in repository is ${{ github.repository }}, runner on ${{ runner.os }}"
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache large ML models
        uses: actions/cache@v4
        with:
          path: ~/.cache/torch/hub/checkpoints
          key: fasterrcnn-258fb6c6+maskrcnn-bf2d0c1e
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'packaging/pip_requirements.txt'
        if: matrix.install_variant == 'pip'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
        if: matrix.install_variant == 'pip'
      - name: Install non-python dependencies using system packager
        run: |
          # ocr
          sudo apt-get -y install pkg-config tesseract-ocr libtesseract-dev
          # xdotool
          sudo apt-get -y install xdotool x11-apps imagemagick
          # vncdotool
          sudo apt-get -y install xfonts-base x11vnc
          # pyautogui
          sudo apt-get -y install gnome-screenshot
        if: matrix.install_variant == 'pip'
      - name: Install any dependencies and build the package
        run: pip --default-timeout=60 install -r packaging/pip_requirements.txt
        if: matrix.install_variant == 'pip'
      - run: sleep 3
      - name: Prepare virtual screen (fake display)
        run: |
          sudo apt-get -y install libx11-dev libxtst-dev xvfb vim-common
          sudo apt-get install -y x11-utils libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
          Xvfb :99 -screen 0 1024x768x24 &> /tmp/xvfb.log  &
          sudo touch ~/.Xauthority
          sudo xauth -f ~/.Xauthority add ${HOST}:99 . $(xxd -l 16 -p /dev/urandom)
          sudo chmod a+rxw ~/.Xauthority
          # give xvfb some time to start
          sleep 3
      - name: Run current semi-isolation semi-integration tests (to be separated in the future)
        run: |
          if [[ "${{ matrix.python-version }}" == "3.10.8" ]]; then export DISABLE_AUTOPY=1; fi
          if [[ "${{ matrix.python-version }}" == "3.11" ]]; then export DISABLE_AUTOPY=1; fi
          if [[ "${{ matrix.python-version }}" == "3.12" ]]; then export DISABLE_AUTOPY=1; fi
          if [[ "${{ matrix.install_variant }}" != "pip" ]]; then cd packaging && bash packager_docker.sh;
          else cd tests && bash coverage_analysis.sh; fi
        env:
          INSTALL_VARIANT: ${{ matrix.install_variant }}
          TESSDATA_PREFIX: /usr/share/tesseract-ocr/4.00/tessdata/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: tests/coverage.xml
          verbose: true
        if: matrix.install_variant == 'pip'
      - run: echo "ðŸ¥‘ This job's status is ${{ job.status }}."

  windows-job:
    name: Windows 10 with Python ${{ matrix.python-version }}
    runs-on: windows-latest

    strategy:
      matrix:
        python-version: [ 3.12.6 ]

    steps:
      - run: echo "Job triggered by a ${{ github.event_name }} event on branch is ${{ github.ref }} in repository is ${{ github.repository }}, runner on ${{ runner.os }}"
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Python ${{ matrix.python-version  }} and Visual Studio C++ dependencies
        run: |
          $pythonVersion = "${{ matrix.python-version }}"
          $pythonInstaller = "python-$pythonVersion-amd64.exe"
          $downloadUrl = "https://www.python.org/ftp/python/$pythonVersion/$pythonInstaller"

          Write-Host "Downloading Python $pythonVersion..."
          Invoke-WebRequest -Uri $downloadUrl -OutFile $pythonInstaller -Verbose
          Write-Host "Download complete."

          Write-Host "Downloading vc_redist"
          mkdir C:\packages\
          Invoke-WebRequest -Uri https://aka.ms/vs/16/release/vc_redist.x64.exe  -OutFile C:\packages\vc_redist.x64.exe -Verbose
          Write-Host "Download complete."

      - name: Run packaging script (should install python and all the dependencies) and run tests
        run: |
          cd
          D:\a\guibot\guibot\packaging\packager_win.bat

#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v4
#        with:
#          files: tests/coverage.xml
#          verbose: true

      - run: echo "ðŸ¥‘ This job's status is ${{ job.status }}."
